name: Moodle Plugin Deployment

# Trigger the workflow manually
on:
  workflow_dispatch:
    inputs:
      plugin-directory:
        description: 'Enter the name of the plugin directory under mod/ to deploy'
        required: true
        type: string

# Environment variables
env:
  MOODLE_ROOT: /var/www/html/moodle  # Moodle installation directory on the server

jobs:
  package-plugin:
    name: Package Plugin
    runs-on: ubuntu-latest
    outputs:
      zip-file: ${{ steps.zip-plugin.outputs.zip-file }}  # Output the generated zip file name
      timestamp: ${{ steps.set-timestamp.outputs.timestamp }}  # Output the timestamp for reuse

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch the entire repository history
      run: echo " Repository checked out successfully."

    - name: Validate plugin directory
      id: validate-plugin
      run: |
        PLUGIN_PATH="mod/${{ inputs.plugin-directory }}"
        if [ ! -d "$PLUGIN_PATH" ]; then
          echo "::error:: Plugin directory '$PLUGIN_PATH' not found in repository!"
          echo "Available plugins in mod/: $(ls -m mod)"  # List available plugins for reference
          exit 1
        else
          echo " Plugin directory '$PLUGIN_PATH' found in the repository."
        fi

    - name: Set timestamp
      id: set-timestamp
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo " Timestamp generated: $TIMESTAMP"

    - name: Zip plugin directory
      id: zip-plugin
      run: |
        ZIP_FILE="${{ inputs.plugin-directory }}-${{ steps.set-timestamp.outputs.timestamp }}.zip"
        echo " Zipping plugin directory: ${{ inputs.plugin-directory }}"
        cd mod
        zip -qr "../$ZIP_FILE" "${{ inputs.plugin-directory }}"
        echo " Plugin directory zipped successfully: $ZIP_FILE"
        echo "zip-file=$ZIP_FILE" >> $GITHUB_OUTPUT
        echo "ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: plugin-package
        path: ${{ env.ZIP_FILE }}  # Upload the generated zip file as an artifact
        retention-days: 5  # Keep the artifact for 5 day
      run: echo " Artifact uploaded successfully: ${{ env.ZIP_FILE }}"

  deploy-plugin:
    name: Deploy to Moodle Server
    needs: package-plugin  # Depends on the first job
    runs-on: self-hosted  # Runs on a self-hosted runner (Moodle server)
 #  environment: production  # Optional: Add environment protection

    steps:
    - name: Validate Moodle directory
      run: |
        if [ ! -d "${{ env.MOODLE_ROOT }}" ]; then
          echo "::error:: Moodle installation not found at ${{ env.MOODLE_ROOT }}"
          exit 1
        else
          echo " Moodle installation found at ${{ env.MOODLE_ROOT }}"
        fi

    - name: Check existing plugin
      id: plugin-check
      run: |
        TARGET_DIR="${{ env.MOODLE_ROOT }}/mod/${{ inputs.plugin-directory }}"
        if [ -d "$TARGET_DIR" ]; then
          echo " Existing plugin directory found at $TARGET_DIR"
          BACKUP_FILE="/tmp/${{ inputs.plugin-directory }}-bkp-${{ needs.package-plugin.outputs.timestamp }}.zip"
          echo " Backing up existing plugin to $BACKUP_FILE"
          zip -qr "$BACKUP_FILE" "$TARGET_DIR"  # Backup the existing plugin
          echo " Backup created successfully: $BACKUP_FILE"
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "backup-file=$BACKUP_FILE" >> $GITHUB_OUTPUT
        else
          echo " Plugin directory does not exist, proceeding with fresh installation."
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: plugin-package
        path: artifact  # Download the artifact to the `artifact` directory
      run: echo " Artifact downloaded successfully to the 'artifact' directory."

    - name: Deploy plugin
      run: |
        DEPLOY_DIR="${{ env.MOODLE_ROOT }}/mod"
        PLUGIN_ZIP="artifact/${{ needs.package-plugin.outputs.zip-file }}"
        
        # Validate downloaded artifact
        if [ ! -f "$PLUGIN_ZIP" ]; then
          echo "::error:: Plugin package not found: $PLUGIN_ZIP"
          exit 1
        else
          echo " Plugin package found: $PLUGIN_ZIP"
        fi

        # Create mod directory if it doesn't exist
        sudo mkdir -p "$DEPLOY_DIR"
        echo " Created directory (if not exists): $DEPLOY_DIR"

        # Unzip plugin with permissions preservation
        echo " Unzipping plugin to $DEPLOY_DIR"
        sudo unzip -qo "$PLUGIN_ZIP" -d "$DEPLOY_DIR"
        echo " Plugin unzipped successfully to $DEPLOY_DIR"

        # Set appropriate permissions (adjust as needed for your environment)
        echo " Setting permissions for $DEPLOY_DIR/${{ inputs.plugin-directory }}"
        sudo chown -R www-data:www-data "$DEPLOY_DIR/${{ inputs.plugin-directory }}"
        sudo find "$DEPLOY_DIR/${{ inputs.plugin-directory }}" -type d -exec chmod 755 {} \;
        sudo find "$DEPLOY_DIR/${{ inputs.plugin-directory }}" -type f -exec chmod 644 {} \;
        echo " Permissions set successfully."

        # Cleanup
        echo " Cleaning up artifact directory."
        rm -rf artifact
        echo " Cleanup completed."

    - name: Verify deployment
      run: |
        DEPLOYED_DIR="${{ env.MOODLE_ROOT }}/mod/${{ inputs.plugin-directory }}"
        if [ ! -d "$DEPLOYED_DIR" ]; then
          echo "::error:: Deployment failed - plugin directory not created!"
          exit 1
        else
          echo " Deployment successful! Plugin directory created at $DEPLOYED_DIR"
        fi